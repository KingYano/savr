{"version":3,"file":"stats-Bp-5V6Jy.js","sources":["../../../../pages/stats.vue"],"sourcesContent":["<template>\n  <div :class=\"[\n    'min-h-screen transition-colors duration-300',\n    isDarkMode ? 'dark bg-gray-950' : 'bg-slate-50'\n  ]\">\n    <div class=\"p-6 space-y-6\">\n      <!-- En-tête -->\n      <div class=\"flex justify-between items-center\">\n        <div class=\"space-y-1\">\n          <h1 :class=\"[\n            'text-3xl font-bold',\n            isDarkMode ? 'text-white' : 'text-slate-900'\n          ]\">\n            Statistiques et Analyses\n          </h1>\n          <p :class=\"isDarkMode ? 'text-gray-400' : 'text-slate-600'\">\n            Visualisez vos données financières avec des graphiques détaillés\n          </p>\n        </div>\n        \n        <div class=\"flex items-center gap-3\">\n          <!-- Bouton retour -->\n          <NuxtLink\n            to=\"/\"\n            :class=\"[\n              'flex items-center gap-2 px-4 py-2 rounded-lg',\n              isDarkMode ? 'bg-gray-800 hover:bg-gray-700 text-white' : 'bg-white hover:bg-gray-50 text-gray-900',\n              'border transition-colors'\n            ]\"\n          >\n            <ArrowLeft class=\"h-4 w-4\" />\n            Retour\n          </NuxtLink>\n\n          <!-- Toggle dark mode -->\n          <button\n            @click=\"toggleDarkMode\"\n            :class=\"[\n              'rounded-full p-2',\n              isDarkMode ? 'hover:bg-gray-800' : 'hover:bg-slate-200'\n            ]\"\n          >\n            <Sun v-if=\"isDarkMode\" class=\"h-6 w-6 text-yellow-500\" />\n            <Moon v-else class=\"h-6 w-6 text-slate-700\" />\n          </button>\n        </div>\n      </div>\n\n      <!-- Filtres pour la période d'analyse -->\n      <div :class=\"[\n        'rounded-xl p-4',\n        isDarkMode ? 'bg-gray-900 border-gray-800' : 'bg-white border-gray-200',\n        'border'\n      ]\">\n        <div class=\"flex flex-wrap gap-4 items-center\">\n          <div class=\"flex items-center gap-2\">\n            <label :class=\"[\n              'text-sm font-medium',\n              isDarkMode ? 'text-white' : 'text-gray-900'\n            ]\">\n              Période d'analyse:\n            </label>\n            \n            <div class=\"flex gap-2\">\n              <Button\n                v-for=\"period in analysisperiods\"\n                :key=\"period.value\"\n                variant=\"outline\"\n                size=\"sm\"\n                :class=\"[\n                  selectedPeriod === period.value \n                    ? 'bg-blue-100 border-blue-300 text-blue-700' \n                    : ''\n                ]\"\n                @click=\"setAnalysisPeriod(period.value)\"\n              >\n                {{ period.label }}\n              </Button>\n            </div>\n          </div>\n\n          <!-- Filtres de dates personnalisées -->\n          <div v-if=\"selectedPeriod === 'custom'\" class=\"flex items-center gap-4\">\n            <div class=\"flex items-center gap-2\">\n              <label class=\"text-sm\" :class=\"isDarkMode ? 'text-gray-300' : 'text-gray-700'\">\n                Du:\n              </label>\n              <Input\n                v-model=\"customDateRange.start\"\n                type=\"date\"\n                class=\"w-40\"\n                :class=\"isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'\"\n              />\n            </div>\n            <div class=\"flex items-center gap-2\">\n              <label class=\"text-sm\" :class=\"isDarkMode ? 'text-gray-300' : 'text-gray-700'\">\n                Au:\n              </label>\n              <Input\n                v-model=\"customDateRange.end\"\n                type=\"date\"\n                class=\"w-40\"\n                :class=\"isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-300'\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Dashboard des statistiques -->\n      <ClientOnly>\n        <StatsDashboard\n          :movements=\"filteredMovementsForStats\"\n          :categories=\"categories\"\n          :is-dark-mode=\"isDarkMode\"\n        />\n      </ClientOnly>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n  import { ref, computed } from 'vue';\n  import { ArrowLeft, Sun, Moon } from 'lucide-vue-next';\n  import { Button } from '@/components/ui/button';\n  import { Input } from '@/components/ui/input';\n  import StatsDashboard from '~/components/dashboard/StatsDashboard.vue';\n  import { useFinance } from '~/composables/useFinance';\n  import { useSettingsStore } from '~/stores/settings';\n  import { useCategoriesStore } from '~/stores/categories';\n  import { storeToRefs } from 'pinia';\n\n  // Stores\n  const financeData = useFinance();\n  const settingsStore = useSettingsStore();\n  const categoriesStore = useCategoriesStore();\n  \n  // État réactif\n  const { isDarkMode } = storeToRefs(settingsStore);\n  const { categories } = storeToRefs(categoriesStore);\n\n  // Périodes d'analyse prédéfinies\n  const analysisperiods = [\n    { value: 'week', label: 'Cette semaine' },\n    { value: 'month', label: 'Ce mois' },\n    { value: 'quarter', label: 'Ce trimestre' },\n    { value: 'year', label: 'Cette année' },\n    { value: 'all', label: 'Tout' },\n    { value: 'custom', label: 'Personnalisé' }\n  ];\n\n  const selectedPeriod = ref('month');\n  const customDateRange = ref({\n    start: '',\n    end: ''\n  });\n\n  // Fonction pour changer la période d'analyse\n  const setAnalysisPeriod = (period: string) => {\n    selectedPeriod.value = period;\n    \n    // Réinitialiser les dates personnalisées si on change de période\n    if (period !== 'custom') {\n      customDateRange.value = { start: '', end: '' };\n    }\n  };\n\n  // Calculer la plage de dates selon la période sélectionnée\n  const getDateRange = () => {\n    const now = new Date();\n    let start: Date;\n    let end: Date = now;\n\n    switch (selectedPeriod.value) {\n      case 'week':\n        start = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'month':\n        start = new Date(now.getFullYear(), now.getMonth(), 1);\n        break;\n      case 'quarter':\n        const quarter = Math.floor(now.getMonth() / 3);\n        start = new Date(now.getFullYear(), quarter * 3, 1);\n        break;\n      case 'year':\n        start = new Date(now.getFullYear(), 0, 1);\n        break;\n      case 'custom':\n        if (customDateRange.value.start && customDateRange.value.end) {\n          start = new Date(customDateRange.value.start);\n          end = new Date(customDateRange.value.end);\n        } else {\n          return null; // Dates personnalisées incomplètes\n        }\n        break;\n      case 'all':\n      default:\n        return null; // Pas de filtre de date\n    }\n\n    return { start, end };\n  };\n\n  // Mouvements filtrés selon la période sélectionnée\n  const filteredMovementsForStats = computed(() => {\n    const movements = financeData.movements.value || [];\n    const dateRange = getDateRange();\n    \n    if (!dateRange) {\n      return movements; // Pas de filtre, retourner tous les mouvements\n    }\n\n    return movements.filter(movement => {\n      const movementDate = movement.date instanceof Date \n        ? movement.date \n        : new Date(movement.date);\n      \n      if (isNaN(movementDate.getTime())) return false;\n      \n      return movementDate >= dateRange.start && movementDate <= dateRange.end;\n    });\n  });\n\n  const toggleDarkMode = () => {\n    settingsStore.toggleDarkMode();\n  };\n\n  // Métadonnées pour la page\n  useHead({\n    title: 'Statistiques - SAVR',\n    meta: [\n      {\n        name: 'description',\n        content: 'Visualisez vos données financières avec des graphiques détaillés et des analyses complètes.'\n      }\n    ]\n  });\n</script>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIE,UAAM,cAAc,WAAW;AAC/B,UAAM,gBAAgB,iBAAiB;AACvC,UAAM,kBAAkB,mBAAmB;AAG3C,UAAM,EAAE,WAAA,IAAe,YAAY,aAAa;AAChD,UAAM,EAAE,WAAA,IAAe,YAAY,eAAe;AAGlD,UAAM,kBAAkB;AAAA,MACtB,EAAE,OAAO,QAAQ,OAAO,gBAAgB;AAAA,MACxC,EAAE,OAAO,SAAS,OAAO,UAAU;AAAA,MACnC,EAAE,OAAO,WAAW,OAAO,eAAe;AAAA,MAC1C,EAAE,OAAO,QAAQ,OAAO,cAAc;AAAA,MACtC,EAAE,OAAO,OAAO,OAAO,OAAO;AAAA,MAC9B,EAAE,OAAO,UAAU,OAAO,eAAe;AAAA,IAC3C;AAEM,UAAA,iBAAiB,IAAI,OAAO;AAClC,UAAM,kBAAkB,IAAI;AAAA,MAC1B,OAAO;AAAA,MACP,KAAK;AAAA,IAAA,CACN;AAGK,UAAA,oBAAoB,CAAC,WAAmB;AAC5C,qBAAe,QAAQ;AAGvB,UAAI,WAAW,UAAU;AACvB,wBAAgB,QAAQ,EAAE,OAAO,IAAI,KAAK,GAAG;AAAA,MAAA;AAAA,IAEjD;AAGA,UAAM,eAAe,MAAM;AACnB,YAAA,0BAAU,KAAK;AACjB,UAAA;AACJ,UAAI,MAAY;AAEhB,cAAQ,eAAe,OAAO;AAAA,QAC5B,KAAK;AACK,kBAAA,IAAI,KAAK,IAAI,QAAA,IAAY,IAAI,KAAK,KAAK,KAAK,GAAI;AACxD;AAAA,QACF,KAAK;AACK,kBAAA,IAAI,KAAK,IAAI,eAAe,IAAI,YAAY,CAAC;AACrD;AAAA,QACF,KAAK;AACH,gBAAM,UAAU,KAAK,MAAM,IAAI,aAAa,CAAC;AAC7C,kBAAQ,IAAI,KAAK,IAAI,eAAe,UAAU,GAAG,CAAC;AAClD;AAAA,QACF,KAAK;AACH,kBAAQ,IAAI,KAAK,IAAI,YAAY,GAAG,GAAG,CAAC;AACxC;AAAA,QACF,KAAK;AACH,cAAI,gBAAgB,MAAM,SAAS,gBAAgB,MAAM,KAAK;AAC5D,oBAAQ,IAAI,KAAK,gBAAgB,MAAM,KAAK;AAC5C,kBAAM,IAAI,KAAK,gBAAgB,MAAM,GAAG;AAAA,UAAA,OACnC;AACE,mBAAA;AAAA,UAAA;AAET;AAAA,QACF,KAAK;AAAA,QACL;AACS,iBAAA;AAAA,MAAA;AAGJ,aAAA,EAAE,OAAO,IAAI;AAAA,IACtB;AAGkC,aAAS,MAAM;AAC/C,YAAM,YAAY,YAAY,UAAU,SAAS,CAAC;AAClD,YAAM,YAAY,aAAa;AAE/B,UAAI,CAAC,WAAW;AACP,eAAA;AAAA,MAAA;AAGF,aAAA,UAAU,OAAO,CAAY,aAAA;AAC5B,cAAA,eAAe,SAAS,gBAAgB,OAC1C,SAAS,OACT,IAAI,KAAK,SAAS,IAAI;AAE1B,YAAI,MAAM,aAAa,QAAS,CAAA,EAAU,QAAA;AAE1C,eAAO,gBAAgB,UAAU,SAAS,gBAAgB,UAAU;AAAA,MAAA,CACrE;AAAA,IACF,CAAA;AAOO,YAAA;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,QACJ;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,QAAA;AAAA,MACX;AAAA,IACF,CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}